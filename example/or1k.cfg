// ----------------------------------------------------------------------------
// OpenRISC 1000 configuration for Proxy RSP Server

// Copyright (C) 2009  Embecosm Limited <info@embecosm.com>

// Contributor Jeremy Bennett <jeremy.bennett@embecosm.com>

// This file is part of the Embecosm Proxy GDB RSP server.

// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.

// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
// License for more details.

// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// ----------------------------------------------------------------------------

// $Id $

// OpenRISC 1000 running hello.c (from gdb-6.8/progs-or32) after hitting
// breakpoint at start of simputc ().

NAME ( "OpenRISC 1000", BIG ENDIAN)

REGISTERS ( 35 )
{ "gpr0", 32, 0 }		// Always zero
{ "gpr1", 32, 0x7eb4 }		// Stack pointer
{ "gpr2", 32, 0x7ebc }		// Frame pointer
{ "gpr3", 32, 0 }		// Start of argument registers
{ "gpr4", 32, 0 }
{ "gpr5", 32, 0 }
{ "gpr6", 32, 0 }
{ "gpr7", 32, 0 }
{ "gpr8", 32, 0 }		// End of argument registers
{ "gpr9", 32, 0x12b0 }		// Link register
{ "gpr10", 32, 0 }
{ "gpr11", 32, 0 }		// Result register
{ "gpr12", 32, 0 }
{ "gpr13", 32, 0 }
{ "gpr14", 32, 0 }
{ "gpr15", 32, 0 }
{ "gpr16", 32, 0 }
{ "gpr17", 32, 0 }
{ "gpr18", 32, 0 }
{ "gpr19", 32, 0 }
{ "gpr20", 32, 0 }
{ "gpr21", 32, 0 }
{ "gpr22", 32, 0 }
{ "gpr23", 32, 0 }
{ "gpr24", 32, 0 }
{ "gpr25", 32, 0 }
{ "gpr26", 32, 0 }
{ "gpr27", 32, 0 }
{ "gpr28", 32, 0 }
{ "gpr29", 32, 0 }
{ "gpr30", 32, 0 }
{ "gpr31", 32, 0 }
{ "ppc",   32, 0x102c }		// Previous program counter
{ "npc",   32, 0x1030 }		// Next program counter
{ "sr",    32, 0 }		// Supervision register

// Exception vectors. Code inserted up to the reset sequence. Thereafter is
// uninitialised.
WORD MEMORY (0x0, 0x1000)
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x00000000, 0x00000000, 0x00000000, 0x00000000,
0x9c207f00,			// l.addi   r1,r0,0x7f00
0x9c410000,			// l.addi   r2,r1,0
0xb4600011,			// l.mfspr  r3,r0,0x11
0xa8630002,			// l.ori    r3,r3,0x2
0x0400048a,			// l.jal    <main>
0xc0001811			// l.mtspr  r0,r3,0x11

// Main program image
WORD MEMORY (0x1000, 0x3a0)
0x9c21fff8, 0xd4011000, 0x9c410008, 0xd7e21ffc,
0x15000001, 0x84410000, 0x44004800, 0x9c210008,
0x9c21fff8, 0xd4011000, 0x9c410008, 0xd7e21ffc,
0x15000004, 0x84410000, 0x44004800, 0x9c210008,
0x9c21ffbc, 0xd4011004, 0x9c410044, 0xd4014800,
0xd7e21ffc, 0x8462fffc, 0xd7e21ff4, 0x8462fff4,
0xdbe21ff3, 0x8c62fff3, 0xa463000f, 0xd7e21fec,
0x8462ffec, 0xdbe21feb, 0x8c62ffeb, 0xdbe21ffb,
0x9062fffb, 0xd7e21fe4, 0x8462ffe4, 0xbd430009,
0x1000000b, 0x15000000, 0x8c62fffb, 0xdbe21fe3,
0x8c62ffe3, 0x9c630030, 0xd7e21fdc, 0x8462ffdc,
0xdbe21fea, 0x00000009, 0x15000000, 0x8c62fffb,
0xdbe21fdb, 0x8c62ffdb, 0x9c630037, 0xd7e21fd4,
0x8462ffd4, 0xdbe21fea, 0x8c62ffea, 0xdbe21ffa,
0x8462fffc, 0xd7e21fd0, 0x8462ffd0, 0xbc030000,
0x1000000a, 0x15000000, 0x8462fffc, 0xd7e21fc8,
0x8462ffc8, 0xb8630044, 0xd7e21fcc, 0x8462ffcc,
0x07ffffcc, 0x15000000, 0x9062fffa, 0xd7e21fc4,
0x8462ffc4, 0x07ffffbf, 0x15000000, 0x85210000,
0x84410004, 0x44004800, 0x9c210044, 0x9c21ffc4,
0xd4011004, 0x9c41003c, 0xd4014800, 0xd7e21ffc,
0x8462fffc, 0xd7e21ff8, 0x8482fff8, 0xbca40009,
0x1000000d, 0x15000000, 0x8462fffc, 0xd7e21ff4,
0x9c80000a, 0xd7e227ec, 0x8462fff4, 0x8482ffec,
0xe063230a, 0xd7e21ff0, 0x8462fff0, 0x07ffffec,
0x15000000, 0x8462fffc, 0xd7e21fe8, 0x9c80000a,
0xd7e227e0, 0x8462ffe8, 0x8482ffe0, 0xe063230a,
0xd7e21fe4, 0x8462ffe4, 0xd7e21fdc, 0x8482ffdc,
0xb8840003, 0xd7e227d8, 0x8462ffd8, 0x8482ffe4,
0xe0632000, 0xd7e21fd8, 0x8462ffd8, 0x8482ffe4,
0xe0632000, 0xd7e21fd4, 0x8462ffe8, 0x8482ffd4,
0xe0632002, 0xd7e21fd0, 0x8462ffd0, 0x9c630030,
0xd7e21fcc, 0x8462ffcc, 0x07ffff86, 0x15000000,
0x85210000, 0x84410004, 0x44004800, 0x9c21003c,
0x9c21ffc8, 0xd4011004, 0x9c410038, 0xd4014800,
0xd7e21ffc, 0x9c600000, 0xd7e21ff8, 0x8482fffc,
0xd7e227f0, 0x8462fff8, 0xd7e21fec, 0x8482fff0,
0x8462ffec, 0xe0841800, 0xd7e227f4, 0x8482fff4,
0x90840000, 0xd7e227e8, 0x8462ffe8, 0xbc030000,
0x10000019, 0x15000000, 0x8482fffc, 0xd7e227e0,
0x8462fff8, 0xd7e21fdc, 0x8482ffe0, 0x8462ffdc,
0xe0841800, 0xd7e227e4, 0x8482ffe4, 0x90840000,
0xd7e227d8, 0x8462ffd8, 0x07ffff5e, 0x15000000,
0x8462fff8, 0xd7e21fd4, 0x8482ffd4, 0x9c840001,
0xd7e227d0, 0x8462ffd0, 0xd7e21ff8, 0x03ffffdc,
0x15000000, 0x85210000, 0x84410004, 0x44004800,
0x9c210038, 0x9c21fff8, 0xd4011004, 0x9c410008,
0xd4014800, 0x9c60002a, 0x07ffff42, 0x15000000,
0x85210000, 0x84410004, 0x44004800, 0x9c210008,
0x9c21fff8, 0xd4011004, 0x9c410008, 0xd4014800,
0x07fffff1, 0x15000000, 0x85210000, 0x84410004,
0x44004800, 0x9c210008, 0x9c21fff4, 0xd4011004,
0x9c41000c, 0xd4014800, 0x18600000, 0xa86313a0,
0x07ffffb4, 0x15000000, 0x18600000, 0xa86313ae,
0x07ffffb0, 0x15000000, 0x9c60002a, 0x07ffff74,
0x15000000, 0x18600000, 0xa86313bd, 0x07ffffa9,
0x15000000, 0x07ffffe3, 0x15000000, 0x8562fffc,
0x85210000, 0x84410004, 0x44004800, 0x9c21000c

// Static data
BYTE MEMORY (0x13a0, 31)
0x48,			// 'H'
0x65,			// 'e'
0x6c,			// 'l'
0x6c,			// 'l'
0x6f,			// 'o'
0x20,			// ' '
0x57,			// 'W'
0x6f,			// 'o'
0x72,			// 'r'
0x6c,			// 'l'
0x64,			// 'd'
0x21,			// '!'
0x0a,			// '\n'
0x00,			// EOS
0x54,			// 'T'
0x68,			// 'h'
0x65,			// 'e'
0x20,			// ' '
0x61,			// 'a'
0x6e,			// 'n'
0x73,			// 's'
0x77,			// 'w'
0x65,			// 'e'
0x72,			// 'r'
0x20,			// ' '
0x69,			// 'i'
0x73,			// 's'
0x20,			// ' '
0x00,			// EOS
0x0a,			// '\n'
0x00			// EOS

// Stack memory image
WORD MEMORY (0x7eb0, 80)
0x00000000,
0x00007ef4,		// Current SP, holds pointer to prev (simputs) FP
0x00000048,		// Start of simputc frame, arg to simputc (ASCII 'H')
0x00001358,		// End of simputs frame, holds return address (in main)
0x00007f00,		// Holds pointer to prev (main) FP
0x00000000,
0x00000000,
0x00000048,		// Argument to pass to simputc (ASCII 'H')
0x00000000,
0x000013a0,		// Temporary value of str
0x000013a0,		// Temporary value of &str[i]
0x00000048,		// str[i]
0x00000000,
0x000013a0,		// Value of str
0x000013a0,		// Value of &str[i]
0x00000000,		// Value of i
0x000013a0,		// Start of simputs frame, arg to simputs (str)
0x00000118,		// End of main frame, holds return address (in start)
0x00007f00,		// Start of main frame, holds pointer to prev (start) FP
0x00000000
